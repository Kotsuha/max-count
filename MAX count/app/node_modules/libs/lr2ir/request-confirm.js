"use strict";

const optsFnMaker = new function() {

	let _common = {};

	this.setCommon = function(common) {
		_common = common;
	};

	/**
	 * Makes a function which can generate options that can be passed to rp().
	 *
	 * @param      {Function}  transform  Transform parameters into an object in required format
	 * @return     {Function}  Can be passed parameters and returns an options object
	 */
	this.makeFn = function(transform) {
		const common = _common;
		return function(...args) {
			const added = transform.assign(undefined, args);
			return Object.assign(added, common);
		};
	};
}();

const { setCommon, makeFn } = optsFnMaker;



const baseUrl = require("./const/url").baseUrl;
const cookieJar = require("./r").cookieJar;
const iconv = require("iconv-lite");
const cheerio = require("cheerio");
const settings = require("./settings");

const SERVICE = require("./const/service");
const VIEW = require("./const/view");

let makeOptions = {};

setCommon({
	method: "POST",
	uri: baseUrl,
	jar: cookieJar,
	encoding: null,
	transform: function(body) {
		body = iconv.decode(body, "Shift_JIS");
		return cheerio.load(body, { decodeEntities: false });
	},
	timeout: settings.timeout
});

makeOptions[SERVICE.LOGIN] = makeFn(function(lr2id, password) {
	return {
		form: { lr2id: lr2id, pass: password }
	};
});
makeOptions[SERVICE.ADD_RIVAL] = makeFn(function(playerid) {
	return {
		form: { mode: "rival_add", playerid: playerid }
	};
});
makeOptions[SERVICE.DELETE_RIVAL] = makeFn(function(playerid) {
	return {
		form: { mode: "rival_delete", playerid: playerid }
	};
});

setCommon({
	method: "GET",
	uri: baseUrl,
	encoding: null,
	transform: function(body) {
		body = iconv.decode(body, "Shift_JIS");
		return cheerio.load(body, { decodeEntities: false });
	},
	timeout: settings.timeout
});

makeOptions[VIEW.MY_PAGE] = makeFn(function(playerid) {
	return {
		qs: { mode: "mypage", playerid: playerid }
	};
});
makeOptions[VIEW.MY_LIST] = makeFn(function(playerid, sort, page) {
	return {
		qs: { mode: "mylist", playerid: playerid, sort: sort, page: page }
	};
});
makeOptions[VIEW.SONG_RANKING] = makeFn(function(bmsid, page) {
	return {
		qs: { mode: "ranking", bmsid: bmsid, page: page }
	};
});



const r = require("./r");

let request = function(options) {
	return r(options);
};
for (let type in makeOptions) {
	request[type] = function(...args) {
		const options = makeOptions[type].apply(undefined, args);
		return request(options);
	};
}



const { MyPage } = require("./util");
const recognize = require("./recognize");

const confirm = {};

confirm[SERVICE.LOGIN] = function(lr2id, $) {
	const $user = $("#user"); // ログイン form's container
	return $user.text().indexOf(`LR2ID:${lr2id}`) !== -1;
};

confirm[SERVICE.ADD_RIVAL] = function(playerid, $) {
	const ids = MyPage.getRivalIds($);
	return ids.indexOf(playerid) !== -1;
};

confirm[SERVICE.DELETE_RIVAL] = function(playerid, $) {
	const ids = MyPage.getRivalIds($);
	return ids.indexOf(playerid) === -1;
};

confirm[VIEW.MY_PAGE] = function($) {
	return recognize($) === VIEW.MY_PAGE;
};

confirm[VIEW.MY_LIST] = function($) {
	return recognize($) === VIEW.MY_LIST;
};

confirm[VIEW.SONG_RANKING] = function($) {
	return recognize($) === VIEW.SONG_RANKING;
};



const UNSUCCESSFUL = {
	[SERVICE.LOGIN]: "Failed to login. Maybe ID or password is wrong.", // "[エラー]不正なIDです" "[エラー]パスワードが違います" ...
	[SERVICE.ADD_RIVAL]: "Failed to add rival.",
	[SERVICE.DELETE_RIVAL]: "Failed to delete rival.",
	[VIEW.MY_PAGE]: "Failed to open マイページ page.",
	[VIEW.MY_LIST]: "Failed to open プレイデータ page.",
	[VIEW.SONG_RANKING]: "Failed to open 曲ランキング page." // "未登録の曲です。" ...
};

function rcGeneral(type, rIns, transform) {
	const _ = undefined;
	return new Promise(function(resolve, reject) {
		request[type].apply(_, rIns).then(function(...rOuts) {
			const cIns = transform.apply(_, rIns.concat(rOuts));
			const confirmed = confirm[type].apply(_, cIns);
			if (confirmed) {
				resolve.apply(_, rOuts);
			} else {
				reject(UNSUCCESSFUL[type]);
			}
		}).catch(function(err) {
			reject(err); // TODO
		});
	});
}

const requestAndConfirm = (function() {

	    // A bunch of "rIns.concat(rOuts) => cIns" functions
	const transform = {
		[SERVICE.LOGIN]:        (...args) => [args[0], args[2]],
		[SERVICE.ADD_RIVAL]:    (...args) => args,
		[SERVICE.DELETE_RIVAL]: (...args) => args,
		[VIEW.MY_PAGE]:         (...args) => [args.pop()],
		[VIEW.MY_LIST]:         (...args) => [args.pop()],
		[VIEW.SONG_RANKING]:    (...args) => [args.pop()]
	};

	let rc = {};
	for (let type in request) {
		rc[type] = function(...args) {
			return rcGeneral(type, args, transform[type]);
		};
	}
	return rc;
})();

module.exports = {
	request: request,
	confirm: confirm,
	requestAndConfirm: requestAndConfirm
};
