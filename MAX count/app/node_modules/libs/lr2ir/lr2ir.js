"use strict";

const { user, setUser, getUserCensored } = require("./user");
const { isExpired } = require("./r");
const { request, confirm, requestAndConfirm } = require("./request-confirm");
const { LOGIN, ADD_RIVAL, DELETE_RIVAL } = require("./const/service");
const { MY_PAGE, MY_LIST, SONG_RANKING } = require("./const/view");
const settings = require("./settings");

const rc = requestAndConfirm;


function FoonLr2ir() {

	this.setUser = function(lr2id, password) {
		setUser(lr2id, password);
		return this;
	};
	this.getUserCensored = getUserCensored;

	this.raw = {
		request: request,
		confirm: confirm,
		requestAndConfirm: requestAndConfirm
	};

	this.login = function(lr2id = user.lr2id, password = user.password) {
		return rc[LOGIN](lr2id, password);
	};

	this.addRival = function(playerid) {
		const loginPromise = isExpired() ? this.login() : Promise.resolve();
		return loginPromise
			.then(() => rc[ADD_RIVAL](playerid))
			.catch((err) => Promise.reject(err));
	};

	this.deleteRival = function(playerid) {
		const loginPromise = isExpired() ? this.login() : Promise.resolve();
		return loginPromise
			.then(() => rc[DELETE_RIVAL](playerid))
			.catch((err) => Promise.reject(err));
	};

	this.myPage = (playerid) => rc[MY_PAGE](playerid);
	this.myList = (playerid, sort, page) => rc[MY_LIST](playerid, sort, page);
	this.songRanking = (bmsid, page) => rc[SONG_RANKING](bmsid, page);

	this.settings = settings;
}

const lr2ir = new FoonLr2ir();

module.exports = lr2ir;
