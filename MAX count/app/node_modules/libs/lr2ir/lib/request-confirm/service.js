"use strict";

const iconv = require("iconv-lite");
const cheerio = require("cheerio");

const { baseUrl } = require("./../const/url");
const { cookieJar, r } = require("./../r");
const { LOGIN, ADD_RIVAL, DELETE_RIVAL } = require("./../const/service");
const { MyPage } = require("./../utility");


const commonOptions = {
	method: "POST",
	uri: baseUrl,
	jar: cookieJar,
	encoding: null,
	transform: function(body) {
		body = iconv.decode(body, "Shift_JIS");
		return cheerio.load(body, { decodeEntities: false });
	}
};

const createOptions = function(obj) {
	return Object.assign(obj, commonOptions);
};



let request = {};

request[LOGIN] = function(lr2id, password) {
	return r(createOptions({
		form: { lr2id: lr2id, pass: password }
	}));
};

request[ADD_RIVAL] = function(playerid) {
	return r(createOptions({
		form: { mode: "rival_add", playerid: playerid }
	}));
};

request[DELETE_RIVAL] = function(playerid) {
	return r(createOptions({
		form: { mode: "rival_delete", playerid: playerid }
	}));
};


let confirm = {};

confirm[LOGIN] = function(lr2id, $) {
	const $user = $("#user"); // ログイン form's container
	return $user.text().indexOf(`LR2ID:${lr2id}`) !== -1;
};

confirm[ADD_RIVAL] = function(playerid, $) {
	const ids = MyPage.getRivalIds($);
	return ids.indexOf(playerid) !== -1;
};

confirm[DELETE_RIVAL] = function(playerid, $) {
	const ids = MyPage.getRivalIds($);
	return ids.indexOf(playerid) === -1;
};


let requestAndConfirm = {};

requestAndConfirm[LOGIN] = function(lr2id, password) {
	return rcGeneral(LOGIN, [lr2id, password], function(datas) {
		const [ lr2id, password, $ ] = datas;
		return [ lr2id, $ ];
	});
};

requestAndConfirm[ADD_RIVAL] = function(playerid) {
	return rcGeneral(ADD_RIVAL, [playerid], (datas) => datas); // [ playerid, $ ]
};

requestAndConfirm[DELETE_RIVAL] = function(playerid) {
	return rcGeneral(DELETE_RIVAL, [playerid], (datas) => datas); // [ playerid, $ ]
};

const rcGeneral = function(type, rIns, transform) {
	const executor = function(resolve, reject) {
		request[type].apply(undefined, rIns)
			.then(function(...rOuts) {
				const cIns = transform(rIns.concat(rOuts));
				const confirmed = confirm[type].apply(undefined, cIns);
				if (confirmed) {
					resolve.apply(undefined, rOuts);
				} else {
					reject(UNSUCCESSFUL[type]);
				}
			})
			.catch(function(err) {
				reject(err); // TODO
			});
	};
	return new Promise(executor);
};

const UNSUCCESSFUL = {
	[LOGIN]: "Failed to login. Maybe ID or password is wrong.", // "[エラー]不正なIDです" "[エラー]パスワードが違います" ...
	[ADD_RIVAL]: "Failed to add rival.",
	[DELETE_RIVAL]: "Failed to delete rival."
};


module.exports = {
	request: request,
	confirm: confirm,
	requestAndConfirm: requestAndConfirm
};
