"use strict";

const rp = require("request-promise");

const cookieJar = rp.jar();

const getCookie = function() {
	const { HOST, PATH } = URL;
	const host = HOST,
		  path = "/" + PATH[0] + "/" + PATH[1];
	let value = 
		cookieJar._jar.store.idx[host] 
	 && cookieJar._jar.store.idx[host][path];
	let cookie = value || null;
	return cookie;
};

const isExpired = function() {
	let result;
	const cookie = getCookie();

	if (cookie === null) {
		result = true;
	}
	else {
		const expires = cookie.login.expires; // 只要這個格式是 Date.parse() 吃的，應該就沒事
		let timeNow = Date.now(),
			timeExp = Date.parse(expires);
		result = (timeNow >= timeExp);
	}
	if (result) console.log("isExpired() 結果:", result); // TODO
	return result;
};

let request = function(options) {
	return rp(options);
};





const { baseUrl } = require("./const/url");
const iconv = require("iconv-lite");
const cheerio = require("cheerio");
const prefs = require("./prefs");

const optionsFnMaker = new (function OptionsFnMaker() {
	let _common = {};
	this.setCommon = function(common) {
		_common = common;
	};
	this.makeFn = function(transform) {
		const common = _common;
		return function(...args) {
			const added = transform.apply(undefined, args);
			return Object.assign(added, common);
		};
	};
})();

optionsFnMaker.setCommon({
	method: "POST",
	uri: baseUrl,
	jar: cookieJar,
	encoding: null,
	transform: function(body) {
		body = iconv.decode(body, "Shift_JIS");
		return cheerio.load(body, { decodeEntities: false });
	},
	timeout: prefs.timeout
});

const makeLoginOptions = optionsFnMaker.makeFn((lr2id, password) => ({
	form: { lr2id: lr2id, pass: password }
}));

const makeAddRivalOptions = optionsFnMaker.makeFn((playerid) => ({
	form: { mode: "rival_add", playerid: playerid }
}));

const makeDeleteRivalOptions = optionsFnMaker.makeFn((playerid) => ({
	form: { mode: "rival_delete", playerid: playerid }
}));

optionsFnMaker.setCommon({
	method: "GET",
	uri: baseUrl,
	encoding: null,
	transform: function(body) {
		body = iconv.decode(body, "Shift_JIS");
		return cheerio.load(body, { decodeEntities: false });
	},
	timeout: prefs.timeout
});

const makeMyPageOptions = optionsFnMaker.makeFn((playerid) => ({
	qs: { mode: "mypage", playerid: playerid }
}));

const makeMyListOptions = optionsFnMaker.makeFn((playerid, sort, page) => ({
	qs: { mode: "mylist", playerid: playerid, sort: sort, page: page }
}));

const makeSongRankingOptions = optionsFnMaker.makeFn((bmsid, page) => ({
	qs: { mode: "ranking", bmsid: bmsid, page: page }
}));


const SERVICE = require("./const/service");
const VIEW = require("./const/view");

const makeOptions = {
	[SERVICE.LOGIN]:        makeLoginOptions,
	[SERVICE.ADD_RIVAL]:    makeAddRivalOptions,
	[SERVICE.DELETE_RIVAL]: makeDeleteRivalOptions,
	[VIEW.MY_PAGE]:         makeMyPageOptions,
	[VIEW.MY_LIST]:         makeMyListOptions,
	[VIEW.SONG_RANKING]:    makeSongRankingOptions
};

for (let type in makeOptions) {
	request[type] = function(...args) {
		return request(makeOptions[type].apply(undefined, args));
	};
}





const { MyPage } = require("./utility");

const confirmLogin = function(lr2id, $) {
	const $user = $("#user"); // ログイン form's container
	return $user.text().indexOf(`LR2ID:${lr2id}`) !== -1;
};

const confirmAddRival = function(playerid, $) {
	const ids = MyPage.getRivalIds($);
	return ids.indexOf(playerid) !== -1;
};

const confirmDeleteRival = function(playerid, $) {
	const ids = MyPage.getRivalIds($);
	return ids.indexOf(playerid) === -1;
};

const recognize = require("./recognize");

const confirmMyPage = function($) {
	return recognize($) === VIEW.MY_PAGE;
};

const confirmMyList = function($) {
	return recognize($) === VIEW.MY_LIST;
};

const confirmSongRanking = function($) {
	return recognize($) === VIEW.SONG_RANKING;
};

const confirm = {
	[SERVICE.LOGIN]:        confirmLogin,
	[SERVICE.ADD_RIVAL]:    confirmAddRival,
	[SERVICE.DELETE_RIVAL]: confirmDeleteRival,
	[VIEW.MY_PAGE]:         confirmMyPage,
	[VIEW.MY_LIST]:         confirmMyList,
	[VIEW.SONG_RANKING]:    confirmSongRanking
};





const UNSUCCESSFUL = {
	[SERVICE.LOGIN]: "Failed to login. Maybe ID or password is wrong.", // "[エラー]不正なIDです" "[エラー]パスワードが違います" ...
	[SERVICE.ADD_RIVAL]: "Failed to add rival.",
	[SERVICE.DELETE_RIVAL]: "Failed to delete rival.",
	[VIEW.MY_PAGE]: "Failed to open マイページ page.",
	[VIEW.MY_LIST]: "Failed to open プレイデータ page.",
	[VIEW.SONG_RANKING]: "Failed to open 曲ランキング page." // "未登録の曲です。" ...
};

const rcGeneral = function(type, rIns, transform) {
	const executor = function(resolve, reject) {
		request[type].apply(undefined, rIns)
			.then(function(...rOuts) {
				const cIns = transform(rIns.concat(rOuts));
				const confirmed = confirm[type].apply(undefined, cIns);
				if (confirmed) {
					resolve.apply(undefined, rOuts);
				} else {
					reject(UNSUCCESSFUL[type]);
				}
			})
			.catch(function(err) {
				reject(err); // TODO
			});
	};
	return new Promise(executor);
};

let requestAndConfirm = {};

requestAndConfirm[SERVICE.LOGIN] = function(lr2id, password) {
	return rcGeneral(SERVICE.LOGIN, [lr2id, password], function(datas) {
		const lr2id = datas[0], $ = datas[2];
		return [ lr2id, $ ];
	});
};

requestAndConfirm[SERVICE.ADD_RIVAL] = function(playerid) {
	return rcGeneral(SERVICE.ADD_RIVAL, [playerid], (datas) => datas);
};

requestAndConfirm[SERVICE.DELETE_RIVAL] = function(playerid) {
	return rcGeneral(SERVICE.DELETE_RIVAL, [playerid], (datas) => datas);
};

requestAndConfirm[VIEW.MY_PAGE] = function(playerid) {
	return rcGeneral(VIEW.MY_PAGE, [playerid], function(datas) {
		const $ = datas[datas.length - 1];
		return [ $ ];
	});
};

requestAndConfirm[VIEW.MY_LIST] = function(playerid, sort, page) {
	return rcGeneral(VIEW.MY_LIST, [playerid, sort, page], function(datas) {
		const $ = datas[datas.length - 1];
		return [ $ ];
	});
};

requestAndConfirm[VIEW.SONG_RANKING] = function(bmsid, page) {
	return rcGeneral(VIEW.SONG_RANKING, [bmsid, page], function(datas) {
		const $ = datas[datas.length - 1];
		return [ $ ];
	});
};

module.exports = {
	request: request,
	confirm: confirm,
	requestAndConfirm: requestAndConfirm
};
