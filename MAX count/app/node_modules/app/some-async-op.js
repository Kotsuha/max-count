"use strict";

const delay = function(ms, param) {
	return new Promise(function(res) { // , rej
		// function fn(foo, bar, baz) {
		// 	console.log(foo, bar, baz);
		// }
		// setTimeout.apply(global, [fn, 3000, "foo!", "bar!", "baz!"]);
		// // But resolve() only has one parameter
		setTimeout(res, ms, param);
	});
};

const someAsyncOperation = function(ms, isOk, result, err) {
	// return new Promise((res, rej) => {
	// 	delay(ms)
	// 		.then(function() {
	// 			if (isOk) res(result);
	// 			return rej(new Error(err));
	// 		});
	// });
	// What's their difference?
	return delay(ms).then(function() {
		return isOk ? Promise.resolve(result) : Promise.reject(new Error(err));
	});
};

module.exports = {
	delay,
	someAsyncOperation
};
